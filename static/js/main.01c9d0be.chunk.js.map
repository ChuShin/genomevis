{"version":3,"sources":["components/LinkageGroup.js","App.js","index.js"],"names":["LinkageGroup","props","createLG","bind","this","node","genetic_map","size","csv","d","distance","cm","lgroup","lg","rb_chr","split","color_map","LcChr1","LcChr2","LcChr3","LcChr4","LcChr5","LcChr6","LcChr7","na","lg_color","LG1","LG2","LG3","LG4","LG5","LG6","LG7","then","data","mydat","nest","key","entries","gmap_summary","gmap","i","offset","length","g_size","max","values","map","name","order","num_markers","lg_size","getGMapSummary","yPosition","yScale","scaleLinear","domain","range","y_axis","axisLeft","scale","ticks","select","append","attr","style","call","forEach","mydata","lg_offset","xi","barWidth","selectAll","enter","yi","text","console","log","className","width","height","ref","Component","App","id","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01c9d0be.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport '../App.css'\nimport { scaleLinear } from 'd3-scale'\nimport { max } from 'd3-array'\nimport { csv } from 'd3-fetch'\nimport { select } from 'd3-selection'\nimport { axisLeft } from 'd3-axis'\nimport { nest } from 'd3-collection'\nimport saveAs from 'file-saver'\n\nfunction getGMapSummary(gmap) {\n  var i, offset = 0\n  var gmap_summary = {}\n  for(i = 0; i < gmap.length; i++) {\n    let g_size = max(gmap[i].values.map(function (d) { return d.distance} ))\n    gmap_summary[gmap[i].key] = {\n      name: gmap[i].key,\n      order: i,\n      num_markers: gmap[i].values.length,\n      lg_size: g_size,\n      offset: offset\n    }\n    offset += g_size\n  }\n  gmap_summary['map_size'] = offset\n  return gmap_summary\n}\n\n\n\nclass LinkageGroup extends Component {\n  constructor(props){\n    super(props)\n    this.createLG = this.createLG.bind(this)\n  }\n  componentDidMount() {\n    this.createLG()\n  }\n  componentDidUpdate() {\n    this.createLG()\n  }\n\n  createLG() {\n    const node = this.node\n    const width = this.props.size[1]\n//    const genetic_map = csv('/data/LR74_scores.csv', d => ({\n    const genetic_map = csv('./genomevis/data/LR26_dmap_input.csv', d => ({\n      distance: +d.cm,\n      lgroup: d.lg,\n      rb_chr: d.rb_chr.split(':')[0]\n    }))\n/*    const color_map = {\n      LcChr1: '#FF24009F',\n      LcChr2: '#E567179F',\n      LcChr3: '#FDD0179F',\n      LcChr4: '#5FFB179F',\n      LcChr5: '#4EE2EC9F',\n      LcChr6: '#0041C29F',\n      LcChr7: '#E3319D9F',\n      na: '#000000'\n    }\n*/\n  const color_map = {\n    LcChr1: '#FF2400',\n    LcChr2: '#fe9922',  //#E56717\n    LcChr3: '#FDD017',\n    LcChr4: '#5FFB17',\n    LcChr5: '#4EE2EC',\n    LcChr6: '#0041C2',\n    LcChr7: '#E3319D',\n    na: '#999999'\n  }\n\n\n    const lg_color = {\n      LG1: '#FF24009F',\n      LG2: '#E567179F',\n      LG3: '#FDD0179F',\n      LG4: '#5FFB179F',\n      LG5: '#4EE2EC9F',\n      LG6: '#0041C29F',\n      LG7: '#E3319D9F'\n    }\n\n\n    genetic_map.then(function(data) {\n      var mydat = nest()\n        .key(function(d) { return d.lgroup })\n        .entries(data)\n      var gmap_summary = getGMapSummary(mydat)\n\n      const dataMax = gmap_summary['map_size']\n      const xPosition = 80\n      const yPosition = 150\n      const barDistance  = 80\n      const barWidth = 25\n//      const yScale = scaleLinear()\n//          .domain([0, dataMax])\n//          .range([0, width])\n//      const yScale = scaleLinear()\n//          .domain([0, 1360])\n//          .range([0, 480])\n      const yScale = scaleLinear()\n          .domain([0, 860])\n          .range([0, 480])\n\n\n\n      /* concatenated view\n      mydat.forEach(function(d,i){\n        let mydata = d.values.map(function (d) { return d.distance} )\n        let lg_offset = gmap_summary[d.key].offset\n        // console.log(gmap_summary[d.key])\n\n        select(node)\n          .append('g')\n          .selectAll('line')\n          .data(mydata)\n          .enter()\n          .append('line')\n          .style('stroke', '#fe9922')\n          .attr('LG', d.key)\n          .attr('value',d => d)\n          .attr('plot_value', d => d+lg_offset)\n        .attr('x1', d => yScale(d+lg_offset)-10)\n        .attr('y1', 50)\n        .attr('x2', d => yScale(d+lg_offset)-10)\n        .attr('y2', 100)\n        .attr('stroke-width', 0.1)\n\n      }) */\n\n//      console.log(gmap_summary)\n\n      /** per linkage view **/\n\n      /* draw axis */\n      var y_axis = axisLeft().scale(yScale).ticks(5);\n      select(node)\n        .append('g')\n         .attr('transform', 'translate(50, 140)')\n         .style('font', '16px arial')\n         .call(y_axis)\n\n\n      /* draw frame */\n      select(node)\n       .append('g')\n       .append('rect')\n       .attr('x', 50)\n       .attr('y', yPosition-40)\n       .attr('width', 600)\n       .attr('height', 390)\n       .style('stroke', '#000000')\n       .style('fill','none')\n       .attr('stroke-width', 2)\n\n\n\n      mydat.forEach(function(d,i){\n        let mydata = d.values.map(function (d) { return [d.distance,color_map[d.rb_chr]]} )\n        let lg_offset = gmap_summary[d.key].offset\n//        let lg_size = gmap_summary.values.map(function (d) { return d.lg_size} )\n        //console.log(gmap_summary[d.key])\n\n        /* draw frame */\n         select(node)\n           .append('g')\n           .append('rect')\n           .attr('rx', 12)\n           .attr('ry', 12)\n           .attr('x', xi => xPosition + barDistance*i - 1)\n           .attr('y', yPosition - 20)\n           .attr('width', barWidth+2)\n           .attr('height', yScale(gmap_summary[d.key].lg_size)+20)\n           .style('stroke', '#000000')\n           .style('fill-opacity',0.1)\n           .style('fill', lg_color[d.key]);\n\n        /* draw data points */\n        select(node)\n          .append('g')\n          .selectAll('line')\n          .data(mydata)\n          .enter()\n          .append('line')\n          .style('stroke', d => d[1])\n          .attr('LG', d.key)\n          .attr('value',d => d[0])\n          .attr('plot_value', d => d[0]+lg_offset)\n        .attr('x1', xi => xPosition + barDistance*i)\n        .attr('y1', yi => yPosition + yScale(yi[0])-10)\n        .attr('x2', xi => xPosition + barDistance*i+barWidth)\n        .attr('y2', yi => yPosition + yScale(yi[0])-10)\n        .attr('stroke-width', 1)\n\n        /* draw labels */\n        select(node)\n          .append('g')\n          .append('text')\n          .attr('x', xPosition + barDistance*i-5)\n          .attr('y', 90)\n          .text(d.key)\n          .style('font', '20px arial')\n\n\n      })\n\n/*\n      // refactor export button\n      select('#exportPNG').on('click', function(){\n        let width = 800\n        let height = 800\n        var html = select('#myid2')\n          .attr(\"title\", \"test2\")\n          .attr(\"version\", 1.1)\n          .attr(\"xmlns\", \"http://www.w3.org/2000/svg\")\n          .innerHTML\n          //.parentNode //.innerHTML;\n        console.log(html)\n\n        var blob = new Blob([node.parentNode], {type: \"image/svg+xml\"});\n        saveAs(blob, \"myProfile.svg\");\n\n      });\n*/\n\n      //\n\n      console.log(node)\n    })\n   }\n\nrender() {\n      return <svg className='LGLinear' width={800} height={500}>\n      <g className='LG' ref={node => this.node = node}></g>\n      </svg>\n   }\n}\nexport default LinkageGroup\n","import React, { Component } from 'react'\nimport './App.css'\n\nimport LinkageGroup from './components/LinkageGroup'\nclass App extends Component {\n   render() {\n   return (\n      <div className='App'>\n      <div className='App-header'>\n      <h2>dmap dashboard</h2>\n      </div>\n      <div id='myid'>\n      <LinkageGroup data={[10,20,40,60,80,100,120]} size={[800,500]} />\n      </div>\n      </div>\n   )\n   }\n}\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}